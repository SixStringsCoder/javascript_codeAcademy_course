Feature Request: Add Audio Sample Preview and Album Art
November 13th 2017

OBJECTIVES
To allow the user to listen to a sample of any Spotify song
To allow the user to view the cover art of any Spotify song

BACKGROUND
Currently,  Jammming is a song playlist-building app. After the user queries the Spotify database with a search term, a Track List populates with tracks showing song name, artist name, and album name along with an icon to add the song to a Playlist.   However, there is no way to listen to preview audio samples of any of these tracks before adding to a playlist.
These additional features would:
Allow a user to preview what a song sounds like to ensure s/he wants to really add it to the Playlist
Allow the user to listen to that same sample even after the song is added to the Playlist
Allow the user to view the cover art of an album
Additionally,  the current UI is not too crowded which allows space for a simple Play/Pause button.

TECHNICAL DESIGN
The current AJAX GET request is already delivering the necessary key-value pair for an audio preview and album art
We can access that key in the Get a Track catalog object, specifically these keys:
"preview_url" : "https://p.scdn.co/mp3-preview/4839b070015",
"images" : [ {
      "height" : 640,
      "url" : "https://i.scdn.co/image/ac68a9e4a867b487",
      "width" : 629
    },


Here’s the potential update to the flow-control based on existing .js files in the app

App.js -
Update App component with a new method, sampleAudio, to control play and stop state.
Update this.state to include isPlaying: false;
Pass sampleAudio method to  <SearchResults sampleAudio={this.sampleAudio} />

SearchResults.js
Update TrackList component by passing the props sampleAudio to TrackList component sampleAudio={this.props.sampleAudio}

PlayList.js
Pass the props sampleAudio to TrackList component sampleAudio={this.props.sampleAudio}

TrackList.js
Update Track component’s .map return statement to include sampleAudio={this.props.sampleAudio}

Track.js
Update Track component to include a method sampleAudio() to pass sampleAudio() props from App.js
Update Track component to include an event handler handleAudioPreview(event)
Update HTML element (<span>) with an onClick{this.sampleAudio} in Render area
The UI will be updated with a Play / Pause Button that alternates between two icons depending on the state.   Use a ternary operator in renderPlayPause() method in Track.js. then use JSX in the render statement to call the method {this.renderPlayPause()}. Consider using unicode symbols instead of images for Play and Pause.
[mock drawing]

Spotify.js
Update search() method’s return jsonResponse.tracks.items.map to include key/value pairs.
preview: track.preview_url
Art: track.images
"preview_url" : "https://p.scdn.co/mp3-preview/4839b070015",
"images" : [ {
      "height" : 640,
      "url" : "https://i.scdn.co/image/ac68a9e4a867b487",
      "width" : 629
    },

(NOTE: No need to adjust query string in the fetch() call.)

CAVEATS
This section is used to lay out alternative solutions and their respective drawbacks, as well as potential drawbacks to the proposed solution above. This is used to make it clear why the technical implementation detailed previously was chosen instead of alternatives. It additionally allows stakeholders or other developers to consider those drawbacks and choose one of the alternate solutions if they prefer it. This may occur if they feel the benefits or drawbacks of that solution are more desirable than the current solution, or if they can identify other benefits and drawbacks not currently listed.
